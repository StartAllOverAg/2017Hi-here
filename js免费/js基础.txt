### 1.js是一门弱类型脚本语言 是一门_{解释型}_语言【HTML和css是文本语言，用来描述】
    2.js  运行在 用户端 **客户端**  浏览器上的语言
    3.js 运行在客户端。容易被更改，安全性较低
    课后：防篡改，负载均衡（独立产品）  API
### js的组成
  1.    ECMAScript    js的规范文档  规定了js的数据类型 基本语句  命名规范  变量  保留字 关键字
   - ECMAScript 的版本  es5 和  es6
  2    dom 文档对象类型  Document object model
  - DOM 操作的是文档对象的     document -HTML文件中的所有内容
  标签 由尖括号和关键字组成       元素   成对标签和内容组成  内容在预算中可以玩为空
  root element（根元素    根目录）
    3   bom  浏览器对象类型   Browser   object model
    bom 是操作window浏览器的顶层对象
    ###js的引入方式
    - 行内式。将js代码块直接写在标签内 < input value="点击" onclick="alert("asd")>
    - 内嵌式 。将代码写在script 里 document.documentElement .onclick=function(){alert("ASda")//给HTML点击事件 点击时触发一个方法
    弹出一段文字}
    - 外链式 。 通过 script src="url"  引入一个外部文件  //
    > js引入的时候一般放在所有内容之后
    > 外链式元素内写的代码块不会生效


    onclick 绑定点击事件
    alert   弹出对话框

    ##js输出放式
    - document.write('asd')--向文档内输出内容，不会覆盖之前的文字
    - console.log('') 向控制台输出一条信息
       - console.dir()输出一个对象的全部属性   累死DOM面板的样式
       - console.error()向控制台抛出异常
       - cosole.clear()情况控制台
          - Ctrl+l
          右键 clearconsole  三种清空控制台
          点击进制图标
   - alert()方法用于显示带有一条指定元素（弹出
   - innerHTML/innerText获取或向指定元素内天井内容
       - innerHTML()获取元素内的所有内容包括元素
       - innerText获取文本内容
    这种方法 会将元素内原有的内容覆盖掉

js的命名规范：
1.严格区分大小写
2.命名中可出现数字  下划线 ￥字母   不使用数字为首位
3.推荐使用驼峰命名法： 多个有意义的单词组成  第一个首字母小写 有意义的      大写
4.不能使用ECMAScript中规定的关键字和保留字
5.变量命名时推荐使用匈牙利命名法【使用数据类型为名称前级】

## js的变量
 是用来储存信息的容器。由于是松散数据类型，所以可放置任何数据类型
## 创建变量的语法
    var obj；    undefined   未定义        变量名：什么都没装      一个=是赋值  两个==是判断是否相等
     三个===是绝对比较   += 保留原有值，在原有值上累加  /*-+ 计算  %取余


 ## 一条生命可以有多个变量，每一个变量用逗号隔开
    ps
    分两个数据类型   基本数据类型 和引用数据类型
    基本数据类型   数字  布尔  null  字符 undefined
    引用数据类型    函数数据类型 ： function  对象数据类型  ： 正则  数组 对象

# 数字数据类型
正负整数    小数   NaN   0
  number（）   是强制转换 有一个不是就是NaN
    作用；将其他数据类型转为数字数据类型    返回结果  数字或者NaN
  - 如果转化的是字符串  直接调用number方法转为数字，有一项不是数字   输出NaN
   如果转化的是   数组，先调用.toString（）方法 将内容转为字符串  在用上一条规则转为数字

  - 如果是布尔  true--1   false --0   undefined--nan   null--0
不强制转换  parseFloat() 字符转化为数字（可转换为浮点数）   机制：将至从左到右依次
   查找  遇到非有效数字  返回NaN
         parseInt() 将字符串转化为一个整数   机制：将值从左到右查找  到非有效停止
         查找到的数字返回    返回数字或NaN

 isNaN   作用  判断一个值是否为数字  返回值  是true或false   机制：在判断之前先将非数字
 值转化为number（）方法  将其转化为数字数据类型
 是数字的时候  false  不是数字的时候是true

## 字符串
是用来储存字符的变量，字符串在js中没有任何意义
## null  现在预留位置为空  之后再添加


## underfined 现在没有将来也没有


## 布尔数据类型 Boolean（）    布尔里有  true和false
判断一个值是真假  o  nan null "" undefined   都是假的
###判断一个条件是否成立
！一个叹号是取反   机制 先将后面的值调用布尔方法 转为布尔  后取反  true false
！！  讲其他数据类型转为布尔类型（ 取反在取反）      和Boolean方法得到的值相同
！！[]=Boolean（[]）   true

## 对象数据类型 object
  数组类（array）    对象类（object）   正则类（RegExp）
  对象类 由键值对组成的  这些键值对是用来描述这个对象的，每一对键值对之间用逗号隔开
  键值对由属性名和属性值组成 key:value

  创建对象的实例
   字面创建var obj1={
       key="asd",
       key1="asd1"
  }
   实例创建
   var obj2=new Object();
  对象的属性   1内置属性：天生自带   2 自定义属性：人为定义
对象的属性是用来描述对象的，还可存储值

**js中用来存储值的方式**
- 变量
- 属性
对象的属性名可以为数字   1以数字为名  +['1']    2 获取属性时  没引号 默认是变量

## 访问对象的方式
 - 对象名。属性名
 - 对象名【‘属性名’】
## 增加属性的方式
 自定义属性的内容：需要增加属性名和属性值
 1.对象名.新的属性名=属性值
 2.对象名['新的属性名']=属性值
 ## 删除属性的方式
delete 对象名.属性名
delete 对象名[属性名]
 ## 修改属性值的方式
对象名.属性名=新的属性值
对象名[’属性名‘]=新的属性值

>属性名为数字的时候，获取属性的方式为：对象名[’属性名‘]，这个方法也适用其他属性名
，属性名为数字的时候可以省略引号，其他属性名省略引号，系统默认为变量

！[]<=>false
只要两边带引号都是字符串，字符串在js中没有意义     undefined  本有，但没赋过值

# 第二天
+=   保留原有的 进行累加
### 基本睡觉类型直接对值进行操作
### 引用数据类型操作的是内存地址


1、浏览器提供给代码运行的环境，代码在这压力从上到下执行
2、遇到应用数据类型时，浏览器开辟一个新的内存空间，将应用数据类型的代码当做字符串存到这个里面
3、开辟的空间会返回个对象一个地址，这个对象存储的不是代码而是地址
4、将这个对象赋值给另一个对象时，赋值过程是讲地址传递给另一个对象
     两个对象将访问同一个地址，操作的是一份代码
### 字符串的拼接
在js中其他数据类型+=一个字符串的话，全部变成字符串
### 在js数据类型的检测
#### typeof (value)
返回值永远是一个字符串  里面包着数据类型
typeof  undefined--》“undefined”
typeof  1-->“number”
typeof  “”-->“string”
typeof  true-->“Boolean”
typeof  []-->“object”
typeof  {}-->“object”
typeof  null-->“object”
typeof  function-->“function”
typeof 不能具体细分object下面的数据类型
typeof 人为null也是object下的数据类型
### instanceof
判断已知对象数据类型的方法（判断一个实例是否属于这个类  例如：[]是不是属于数组类）
({}) instanceof Object   -->true
1 instanceof Number ->false
new  string() instanceof String -->true
instanceof 在检测的时候  基本数据类型不能检测
样式   instanceof   类型
### constructor
运算返回值是布尔类型的值
[1,2,3].constructor ===Array       ** ===绝对比较  左右两侧的数据类型完全一致**
### Object.prototype.toString.call()
只要两侧有引号的字符都是字符型，字符串在js中没有意义
null 预留一个位置
 undefined 本应有值 但是没有


## 数据类型直接的比较
- 对象==对象  永远=false
   （[]）==（[]）  []==[]  {}=={}  false

- 数字==字符串  字符串调用Number()方法，将字符串转为数字，再进行比较
   1=='1'        1==Number('1')

- 数字==布尔 布尔转为数字数据类型，调用Number()
   1==false    1==Number(false)   1==0

-  对象==字符串
   对象转化为字符串后再进行比较，调用toString()方法
   例如：
   []==''  -- > [].toString() ==''  -- > ''==''  返回true
   {}==''  -- > {}.toString()==''  -- > '[object Object]'=='' 返回false

- 数字==对象   对象调用.toString()变成字符串，字符串调用Number()方法变成数字
   1==[]      1==[].toString()-->  1==""-->1==Number('')-->1==1 -->true

- 字符串==布尔  双方都转化成数字数据类型

- null==undefined -- 》true        null===undefined -- 》false
  NaN==NaN false
   === 要求两边数据类型一致

- 对象==布尔   双方转化为数字
     对象和其他数据类型比较的时候，最先都要转化为字符串     最终比较的时候 都是数字数据类型在比较

   对象==对象  false
   对象==字符串   对象-》字符串
   对象--数字  对象转为字符串 字符串转为数字
   对象==布尔   都转数字
   字符串==数字 字符串转数字
   字符串==布尔  布尔转为数字
   数字==布尔  布尔转数字
   null==undefined true
   null===undefined false
   NaN==NaN false

   null 和undefined 与其他任何类型比较都为  false

  ## 判断语句
  if  else
  （条件）--》true/false

   1、 if（条件）{条件成立执行的代码}
   2、 if（条件）{条件成立执行的代码}else{条件不成立执行的代码}
   3、 if（条件1）{条件1成立执行的代码}
        else if（条件2）{条件2成立执行的代码}
        else if（条件3）{条件3成立执行的代码}
        ...else{条件不成立执行的代码}

##switch
switch(变量){          ** 是绝对比较  没有break，条件都执行一次**
   case1:
   执行代码1；
   break；
   case2:
      执行代码2；
      break；
    default：
        执行代码3；
}
##三元运算符（条件运算符/三目运算符）
基于某些条件对变量赋值的条件运算符
声明 变量名=（条件）？添加成立时将这个值给变量：添加不成立将这个值给到变量；
var num=(!0)?2:3  -->num=2
!0?alert('ok'):null;
!0?alert('ok'):void(0);
!0?(alert('ok'),console.log('ok')):(alert('ok'),console.log('ok'));
     如果要执行的是多个语句，需要将这些语句放在一个括号里，用逗号隔开

# 循环 x=1  ++i  先运行这个  x=2 y=2  *$$$*   i++  先给y=1 x+1=2    x=2 y=1
i++ 先给值在加值（先赋值在累加）             ++i  先加值在给值（先在自身累加，在赋值）
### for循环
   for循环适用于已知循环次数
     - 声明一个变量 设置初始值
     - 设定循环范围
     - 执行循环体中的代码
     - 设置初始值的累加操作
 for（var i=0;i<4；i++）{
 循环体的代码

 }

 ###  for in循环
在遍历对象时，不知道这个对象的属性名是否存在数字，所以只能用对象名[变量名]的形式获取属性值
obj[key]  中括号是遍历 而不是一个属性  所以不能加引号
 for in循环 只能遍历可枚举属性  （自定义输性）




## break 出现哎循环体中，break后面的不执行，整个循环结束  执行第一次
     break


## continue出现正在循环体中，循环体continue后面的代码不执行，循环依然正常
最后只有一个值


# 函数
还有时间的驱动或者当它被调用时执行。可反复使用的代码块
函数内定义的变量叫局部变量  形参  是抽象的  实参是实实在在的值
 没给形参的情况下，给了实参  依旧按照给的形参计算
如果传的第一个实参，是字符串的情况下，对实参进行处理，然后返点乘积
  > 函数是一个方法   没调用的时候，没作用，调用才有作用
  >js是单线程语言  存在内存空间调用时在开辟一个空间执行    --》浏览器行为
  >、、函数名 代表的是函数本身   、、函数名（）  代表函数执行结果
  函数名（）：第一种调用方式
  xxx。onclick= 函数名 第二种方式    将函数当做一个值给到一个对象的某个属性获事件

return  代表的是值  儿不是本身这个变量


## 匿名函数分两种
> 自执行函数 （function（）{}）（）; ~/!/+/-function（）{}（）;
> 函数表达式  写了一个匿名函数 给赋值一个变量   var sum= function(asd,a,as){}  sum(1);

函数中的this  事件 点前面是谁 this就是谁

# 前端
## 定义变量
>定义变量的时候分为两步
>声明 和 定义
```
var num = '干活的';
var sayName = function () {
	alert('告诉你的名字')
}
```
# JS的数据类型
## 基本数据类型
number string Boolean null undefined
引用数据类型，其实就是一块代码块。
## string 字符串
只要有引号包含就是字符串。
任何数据类型和字符串相加，都会转化成字符串。
字符串拼接的前提是：其中至少有一项字符串。
## number 数字
```
    function numChange () {
        var num = '123.1珠峰';
        console.log(Number(num)); // 强制转化，只能转化可识别的有效数字，遇到非数字字符，会返回NaN。
        console.log(parseFloat(num));// 可转化字符串，遇到不能转化的非数字字符，返回之前识别数字
        console.log(parseInt(num));// 可转化字符串， 只能转化小数点前边的有效数字
    }
    numChange();
    //isNaN()
    // is not a number ? 这不是一个数字，对吗？
    // NaN跟谁都不相等。
```
## 布尔
布尔数据类型的值有两个 1、true 2、false
在js中!的作用就是取反,
!! 将其他数据类型转为布尔

```
    <input type="text" id="aleVal" value="">
    var ale = document.getElementById('aleVal').value;
    if (!ale) {   //在浏览器在做if判断时，会把空字符串默认转化为false;
         alert('对不起，请输入信息')
    }
```
# 引用数据类型
对象object 函数 date 正则regex 数组array
js 对象、
在对象中，定界符 { }，括号中包含的是代码块，属性：属性值，带对象中给熟悉赋值得格式是' : '
// 格式JSON
```
    var people = {
        init: function () {alert('大家好')},
        youName: '常哲楠',
        tag: '咋开心',
        obj: {
            name: '阿拉蕾',
            age: '4.5岁'
        }
    };
    // 获取对象的属性 对象名.属性名
    people.youName = '陈卉';
```
// 对象，自定属性的方法？
> 1、对象名.自定义属性名 = 属性值；（基本数据类型、引用数据类型都可）
> 2、 对象名['属性名'] = 属性值；（基本数据类型、引用数据类型都可）
> 3、属性名规范：可以是纯数字，也可是字符（语义化）
> 4、内置属性，对象天生自带的属性。
```
    var people = {
        init: function () {alert('大家好')},
        'youName': '常哲楠',
        'tag': '咋开心',
        teacher: "zhaoxuan"
    };
    var teacher = {
        name: 'zhaoxuan',
        age: '26岁'
    };

    people['teacher'] = teacher;
    var _that = 'teacher';
    console.log(people[_that])
```
### for 循环
```
// for+() +{}
//(var i=0; i<8; i++) 声明一个循环的标记， 循环次数的判断， 每次循环完了改变标记

	for (var i=0; i<8; i++ ) {
		var num = 1; // 没次循环的时候都创建了一个num变量
		console.log(num)
   }
```
```
   var arr2 = [
        {
            name: 'zhaoxuan'
        },
        {
            name: 'baihui'
        },
        {
            name: 'xiaotian'
        }
    ];
    var teachers = '';
    for (var i=0; i<3; i++) {
        teachers+=arr2[i].name;
        console.log(teachers);
    }
    //输出结果 'zhaoxaun'   'zhaoxuanbaihui'  'zhaoxuanbaihuixiaotian'
```
```
// 错误的
var arr2 = [
        {
            name: 'zhaoxuan'
        },
        {
            name: 'baihui'
        },
        {
            name: 'xiaotian'
        }
    ];

    for (var i=0; i<3; i++) {
	    var teachers = ''; // 每次进来都会穿件一个空字符串
        teachers+=arr2[i].name; //1、''+zhaoxuan  2、''+baihui 3、'' + xiaotian
        console.log(teachers);
    }
    //错误输出结果 'zhaoxaun'   'baihui'  'xiaotian'
```
### for in循环
```
	//语法
	var person = {
		name: 'zhaoXuan',
		age: '12',
		like: '讲课'
		}
	for (var attr in obj) {
		// var attr 声明变量;
		// 然后循环体中赋值 attr = 'name'
		// 再循环体中给他赋值每一次遍历的属性名
	}
```
### if 判断
```
	if (//判断条件，条件正确为true的时候，才执行方法) {
		//方法的代码块
	}else{
		//在if判断不成立为false时候，执行else里边的代码
    }

	// 自上而下依次判断，只要有一成立，就不再往下做判断
	if () {
	// 多个判断条件
	} else if () {
	// 第二次，先判断在执行
	} else if () {
	// 第三次，先判断在执行
	} else {
	// 以上所有的判断条件都不成立，执行这的代码
	}
     console.log(0 || 0 || 4 || '');// 多层或者判断，当遇到true的时候返回当前项
     && 并且  是所有的逻辑都成立才行，如果一个不成立就返回不成立项
    console.log(2&&0||4&&6); // 并且和或者重复使用的时候我们先判断并且
    console.log(!!0&&1);
```
### switch case 判断

   ![Alt text](./1488620056899.png)
>1、case 是绝对等于，数据类型需要相等，相当于 ===；
> n 要比较的对象
> case 跟比较的值
> ： 要执行方法，每次执行完方法后要写break，判断成功执行方法后，不再往下判断
> default  所有判断条件都不成立时，执行的方法
###三元运算符 ？ ： ;
```
  判断的条件 ? 条件成立执行的方法 : 条件不成立执行的方法;
'0' ? alert('厉害了我的哥') : alert('笨蛋我的哥');
// 所有的判断条件都会默认转化成Boolean，true执行，false不执行
```

# 1周周末2
### while循环
```
	while (//循环的判断条件){
	//条件成立执行的代码}
	var num = 1;
    while (num < 100) {
        console.log(num+=4);
    }
```
### 获取DOM中html标签的方式
>![Alt text](./1488681500755.png)
```
	document.getElementById('main')
	// 获取的到的是，id='main'的这个DOM节点，包含他的子节点。

	//document.getElementsByTagName();
	//document.getElementsByClassName();
	上边这两个方法，获取到的是节点集合，我可以理解为是一个数组，所以他不能使用DOM的getElement这个方法了。

    //document.querySelectorAll();
    括号里边填写('.类名') ('html标签名') ('#id名')
    这个方法获取到的DOM，也是一个节点集合，我们也可以理解为，一个数组，所以他也不能使用DOM的getElement这个方法了。


	//document.getElementsByName();
	<li><input type="text" name="zs" id="zs" value="刘能杀手"></li>
	document.getElementsByName('zs');
	括号里边填写('name的值')，获取到的对象是节点集合，也可以理解为一个数组，所以他也不能使用DOM的getElement这个方法了。
```

## Dom获取元素的方法
document object model   文档对象
> 通过ID只能获取一个元素
> document.getElementById('idName')
      - document是获取范围，通过ID获取的时候，范围只能是document
      - 页面上有两个以上相同的ID名称，获取第一个
      - 在IE67中，会将表单元素的name属性值当做ID名称来调取，并不区分大小写
      - 可直接调用ID这个元素（不推荐）
> 通过标签名获取 一组 元素
> document.getElementsByTagName('idName')
      - 获取到的是一个集合，类数组
        document是一个可以变的范围
        获取的时候通过集合中的索引来进行获取obj{0}、obj.item（0）
>　通过标签属性name的值获取一组元素
>　document.getElementsByName("name ")
        - 获取到的是一个集合，类数组
        document是一个可以变的范围
        获取的时候通过集合中的索引来进行获取obj{0}、obj.item（0）
        在IE6-9浏览器下，只对表单起作用
>　通过标签属性class的值获取一组元素
>　document.getElementsByClassName("name ")
        - 获取到的是一个集合，类数组
        document是一个可以变的范围
        获取的时候通过集合中的索引来进行获取obj{0}、obj.item（0）
        在IE678 报错
>　通过根元素获取一组元素
> document.documentElement//获取HTML元素
> document.body//获取body元素
//获取当前页面的宽度和高度
   var
     width=document.documentsElement.clientwidth||document.body.client.body.clientWidth;
     var height=document.documentElement.clientHeight||document.body.clientHeight；


## Dom节点
  Node在页面中出现的所有东西都是节点，元素、注释、文本等都是节点
  作用：通过节点可以进行DOM对象的增删改查
常用的DOM节点有哪些
```
    childNodes 获取所有的子节点（一组）
    children   获取所有元素子节点（一组）
    parentNode 获取父亲节点
    previousSibling 获取上一个节点
    previousElementSibling 上一个元素节点（不兼容）
    nextSibling 获取弟弟节点
    nextElementSibling下一个元素节点（不兼容）
    firstChild 获取子节点中的第一个
    lastChild  获取子节点中最后一个

```
|节点类型|nodeType|nodeName|nodeValue|
|:--:|:--:|:--:|:--:|
|节点类型      	|nodeType|nodeName|	nodeValue
|元素节点（元素标签）|	1|	大写的标签名|	null|
|文本节点（文字）	|3	|#text	|文字内容|
|注释节点（注释）|	8	|#comment|	注释内容|
|document（整个文档）	|9	|#document	|null|

# DOM节点
### 创建元素节点
createElement()     create[kri``et] 创建 创造

  #### 将新创建的元素节点调价到指定  元素所有内容之后（末尾）
 oDiv.parentNode.appendChlid(oDiv)
  > appendChlid 前是oDiv的父级元素
  ，

#### 将创建的元素添加到已有元素之前
父级元素.insertBefore(要放置的元素，放在谁之前)
oldTag.parentNode.insertBefore(newTag,odlTag)

#### 创建属性节点
 setAttribute(属性名,属性值)--直接向对象添加一对键值对
createAttribute()//创建的键值对，可以直接显示在html标签中




#### 删除创建的元素节点
  父级元素.removeChild(删除的对象)
  oDiv.parentNode.removeChild(oDiv)
  任何的元素节点都可以移除

#### 克隆元素节点
  oDiv.cloneNode(true)
  如果参数为true：是将当前元素下所有的元素克隆一份
  默认参数为false（不填参数）：只克隆当前元素

#### 替换
  父级元素.replaceChild(替换的对象，被替换的对象)
  oDiv.parentNode.replaceChild(替换的对象，被替换的对象)

## Math方法及应用
1、Math.abs()取绝对值
2、Math.ceil()向上取整（出现小数点向上+1）
3、Math.floor（）向下取整
4、Math.round（）四舍五入
5、Math、max（val.val2.val3..）取最大值
6、Math、min（val.val2.val3..）取最小值
7、Math.random（）获取[0-1]之间的随机小数不包含1
8、Math.round（Math.random（）*（m-n）+n）任意两数之间的随机数

## Array数组
什么方法改变原数组  什么方法不改变
什么方法返回查找项活删除项  什么方法返回长度

删除数组末尾项的方法
- pop
- ary.length--
- ary.splice(ary.length-1,1)/ary.splice(ary.length-1)
向数组末尾添加
- push()
- ary.splice(ary.length,0,x)
向数组开始添加
- unshift()
- ary.splice(0,0,x)

## 字符串 string
 字符串是js中代表字符的 变量，字符用引号包裹，单引、双引都可以
 字符串是有长度有索引的

  ### 获取指定索引位置的字符
 charAt（索引）

### 字符串截取
substr(n,m)从索引N开始，截取m个字符
原子符串不改变，返回查找的字符
substring（n,m）从索引N开始，查找到索引m处，不包含m
原子符串不改变，返回查找的字符
slice(n,m) 从索引n开始找到索引m处，不包含m-->支持负数作为索引（str.length+负数索引）
只写n没有m：代表截取到末尾位置


### 查找字符所在字符串的索引
- indexOf('value')返回值是第一次出现所在位置的索引
- lastIndexOf(字符)：返回该值最后一次出现所在位置的索引
- search('字符串'):返回的是该值出现所在的索引
- 返回值-1说明该值不存在于这个字符串成
- match（'字符串'） 返回一个数组，数组中是匹配到的字符

### 字符串内字母大小写
- toLowerCase()转化为小写
- toUpperCase()转化为大写

### 替换与正则表达式匹配的字符串
replace（'原来的','新的'）
//如果不配合正则使用的话   只能替换第一次查找到的字符

### 将字符串按照指定分隔符产分成数组
split(分隔符)
split()将字符串当做一项转为数组
split('')将字符串的每一项都当做数组中的每一项分隔符要在字符串中存在   比较分割符分割后不会出现
         数组中

## 定时器
床底是参数  第一个是方法（就是一个函数），第二个是时间
#### 指定一个时间，重复执行一个方法
window.setInterval([function],[interval])

#### 指定一个时间，达到时间后执行一个方法，只执行一次
window.setTimeout([function],[interval])

定时器发返回值是一个数字，代表是这个文档下第几个定时器
#### 清楚定时器 不一定是timeout定义的就一定用timeout清楚，可通用
clearTimeout()和clearInterval()


