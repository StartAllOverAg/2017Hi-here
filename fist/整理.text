### 数据类型
 - 基本数据类型：number,string,boolean,null,undefined
 - 引入数据类型：对象类型、array,regexp,object函数类型、function
#### 基本数据类型操作的是值  引用数据类型操作的是地址
### 预解释（*变量提升*）
  >只针对当前作用域 只发生在当前作用域中 首先开始对window进行预解释  执行时会形成一个私有
  作用域  然后  函数执行的时候也会进行预解释
- 在当前作用域,Js代码执行前，吧所有带var和带function关键字的进行声明或者定义
 （window是全局作用域）
-  声明 var  num  function  fn      **预解释的时候带var只声明  不定义**
- 定义  赋值  num=321   **通过var声明的时候 会给变量赋值一个默认值undefined**
- 预解释完成后  代码自上而下执行
#### 全局变量   就是在全局作用域中声明的变量
####   私有变量    就是在私有作用域中声明的变量
####  函数执行  将函数里的js代码加载运行  需要一个供函数里js代码执行环境->私有
    - 作用域链  如果在私有作用域中遇到一个变量，先看是否是形参或也没有在预解释声明过；
    如果没有声明过也不是形参，就会去上级作用域查找，找到window为止
 > 如何看上级作用域
  看函数是在哪儿定义的
  return 后面的会被当成一个返回值    报错  如果没有return输出内容
## Linux 常用命令
####  mkdir  创建文件夹
  - -p递归创建
  ```
  makdir -p cc/ee  //创建了两个文件夹   父子关系
  ```
  - touch 创建文件
  ```
  touch 文件名
  ```
  - echo 写入内容
  ```
  echo hello>文件名   //将hello写入到文件tex里    覆盖前面的
  ```
  ```
  echo word>>文件名   //不会覆盖hello    Word 和 hello 都在
  ```
  - Cat   文件          查看文件里的内容
  - cd  目录路径
  - ls              查看当前目录下有哪些文件
  ```
  ls -al(-a 只看文件夹    -al查看所有的详细信息)
  ```
  - cd ..           回到当前目录父级目录
  - pwd                  查看当前所在目录
  - rm -rf  文件名        删除文件夹
  #### 在全局作用域中声明的变量，不仅是全局变量也是全局作用域的属性
   > 函数执行形成一个私有作用域  保护里面理由变量 不收外界干扰 的保护机制叫闭包
   >　全局不能改变私有的

### 堆内存
堆内存用来存储应用数据类型的值
对象和属性值    对象类    存储的值


### 栈内存  作用域  环境
供js代码执行的环境
- window (栈内存)  关闭浏览器的时候就会销毁
- 一般情况下函数执行形成私有作用域(栈内存) 执行完成代码  就会立即销毁


### 内存释放
浏览器默认机制  每间隔一段时间会吧那些  没有被占用的 内存回收
> 在私有作用域（栈内存）中，返回一个引用数据类型 呗外部接受 就不能被销毁

> 不立即销毁 如果返回的是一个函数数据类型  要等返回值执行完后  才能销毁


## 预解释   引用数据类型会开辟一个空间，吧函数体重的代码以字符串形式存储起来
   给一个虚拟的地址
- fn  吧整个函数的定义部分（函数本身）输出
- fn()吧当前函数执行的返回结果，return后面是啥就是啥，没有就默认是undefined
   #### 预解释
   **在当前的作用域中，js代码执行前浏览器首先吧所有带var function进行提前的声明或定义**
声明 ： 就是容器  变量
定义 ： 给容器或变量  赋值
 ### var 不重复声明    带function不重复声明   重复定义
  var  只声明  不定义   function 声明 定义  一起完成
- 预解释只发生在当前的作用域下  在函数执行的时候才会预解释里面的
## return后面的代码虽然不执行了，但是需要进行预解释，return后面跟的是返回的值，所以不进行预解释

## 在预解释中，如果名字已经声明了，不需要重新声明  需要重新赋值



























































